################
# Introduction
################

# The problem is the following:
- we want to launch a task
- get the result
- use this result to launch another task

example:
- get user id
- get user information from DB using id
- send the mail to the users

# generic template
ExecutorService service = Executors.newSingle....();
Runnable task = () -> {};
Future future = service.submit(task);

// do something

Object result = future.get(); // block
or,
future.cancel();

=> target is to make it non-blocking


# asynchronous and concurrent are different notions
- what we need is:
  - being able to trigger a task on the completion of another one
  - being able to specify in which thread a task is executed

- one solution is fire an event and have a listener to get notified and do some action
- however, this is still blocking and synchronous
- thus, events are not the right tools - lets check messages
- a message is sent to the broker
- this will trigger the subscribers of this kind of message
- however, even message driven design is synchronous

- event vs message:
- an event is a signal
- a message is a piece of data that recipients will get and react upon based on the message


#####################################################
# Setting up an async operation with CompletionStage
#####################################################
- Define a task
- how to launch a task in another thread?
  - Runnable (no return)
  - Callable (return a value and throws exception)

- Runnable runnable = () -> {....};
- Callable<User> callable = () -> connection.readUser(1L);

- if want to execute the task in the same thread (calling thread):
runnable.run(); // instead of using start()
callable.call(); // instead of submitting to executor service

- if want to execute the task in another thread:
new Thread(runnable).start();
or
Thread thread = new Thread();
thread.start(runnable);

=> the above pattern should not be used anymore, instead use executor service
ExecutorService service = Executors.newSingleThreadExecutor();
Future<?> future = service.submit(runnable);
or
Future<User> future = service.submit(callable);


----------

## From Future to CompletableFuture
- CompletableFuture is almost same as Future but has more methods
- important methods:
runAsync(runnable)
supplyAsync(supplier)

- example (Runnable):
instead of using Future object,
  Future<?> future = service.submit(runnable);
use,
  CompletableFuture<Void> compFut = CompletableFuture.runAsync(runnable);

- CompletableFuture does NOT work with Callables but only with Suppliers
- example (Supplier):
Supplier<User> supplier = () -> connection.readUser(1L);
...
// service.submit(supplier); // this will NOT compile
CompletableFuture<User> compFut = CompletableFuture.supplyAsync(supplier);

- can convert any Callable to Supplier but ensure that supplier can NOT throw any checked exceptions
- by default, the async tasks are run in the common fork/join pool
- however, can also pass executor service as an argument
- example:
Future<?> future = service.submit(runnable);
CompletableFuture<Void> compFut = CompletableFuture.runAsync(runnable, service);
or,
CompletableFuture<User> compFut = CompletableFuture.supplyAsync(supplier, service);


----------

## Closer look at CompletableFuture
- CompletableFuture is a class that implements:
Future
CompletionStage

- CompletionStage adds methods to chain tasks
- CompletableFuture add more methods

- a task has a state:
running
completed normally
completed exceptionally

- 5 methods in Future
T get();
T get(long timeOut, TimeUnit unit);
void cancel();
boolean isDone();
boolean isCancelled();

# more methods in CompletableFuture
- get the results in a different way
T join(); // may throw an unchecked exception
T getNow(T valueIfAbsent);

- force the returned value
boolean complete(V value);
void obtrudeValue(V value);

- force an exception
boolean completeExceptionally(Throwable t);
void obtrudeException(Throwable t);


----------

## force the returned value

# boolean complete(V value)
checks if the task is done
- if its done: then does nothing
- if its not done, then it completes it and sets the returned value to given value

# void obtrudeValue(V value)
checks if the task is done
- if its done: then forces the returned value to given value => this is the difference with complete(value) method
- if its not done, then it completes it and sets the returned value to given value
- this function should be used only in error recovery operations


----------

## force an exception

# boolean completeExceptionally(Throwable t)
- forces the completion if the task is NOT done

# void obtrudeException(Throwable t)
- forces the completion even if the task is done



#############
# Demo code
#############

## FirstCompletableFutures.java

- suppose in my main(): I just write this code

Runnable task = () -> {
      System.out.println("I am running asynchronously in the thread " + Thread.currentThread().getName());
    };

CompletableFuture.runAsync(task);

- nothing is printed on output
=> CompletableFuture uses default fork/join pool and the async thread is daemon
   thus, the main thread dies and exits the program without printing anything
   just adding Thread.sleep(100) after runAsync() call will print the message above

- now suppose I create a ExecutorService and pass that to runAsync()
CompletableFuture.runAsync(task, service);

- here the program will not terminate as the main thread will exit - however executor service is still running its thread from the pool
as it is non-daemon => need to explicitly call service.shutdown()

- also no need to use Thread.sleep() as executor will complete the submitted task before shutdown completely

--------------------

## CompletableFutureWithSupplier.java
- similar to Runnable above, if pass a supplier to supplyAsync() - it will no do anything when main() thread exits
Supplier<String> supplier = () -> Thread.currentThread().getName();
CompletableFuture.supplyAsync(supplier);

- thus, can call join() for main() to block first
CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(supplier);
String string = completableFuture.join();
System.out.println("Result = " + string);

- can add sleep() in Supplier and use complete() or obtrudeValue() to force the return value


--------------------

## SimpleCompletableFuture
- how to complete() a completableFuture

--------------------


#####################################################
# Triggering a Task on the Completion of other tasks
#####################################################
- use case:
have a list of primary keys - user ids (supplier)
fetch all users from database for all the user ids (mapping)
store them in a List<User> (reduce)















